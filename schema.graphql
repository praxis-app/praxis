type Canary {
  id: Int!
  statement: String!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ServerConfig {
  id: Int!
  securityTxt: String
  showCanaryStatement: Boolean!
}

type Like {
  id: Int!
  post: Post
  comment: Comment
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: Int!
  body: String
  images: [Image!]!
  comments: [Comment!]!
  likes: [Like!]!
  user: User!
  group: Group
  event: Event
  createdAt: DateTime!
  updatedAt: DateTime!
  commentCount: Int!
  likesCount: Int!
  isLikedByMe: Boolean!
}

type Vote {
  id: Int!
  voteType: String!
  proposal: Proposal!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EventAttendee {
  id: Int!
  status: String!
  user: User!
  event: Event!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProposalActionEventHost {
  id: Int!
  status: String!
  user: User!
  event: ProposalActionEvent!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProposalActionEvent {
  id: Int!
  name: String!
  description: String!
  location: String
  online: Boolean!
  externalLink: String
  hosts: [ProposalActionEventHost!]!
  proposalAction: ProposalAction!
  startsAt: DateTime!
  endsAt: DateTime
  host: User!
  coverPhoto: Image
}

type ProposalActionGroupConfig {
  id: Int!
  privacy: String
  adminModel: String
  decisionMakingModel: String
  standAsidesLimit: Int
  reservationsLimit: Int
  ratificationThreshold: Int
  votingTimeLimit: Int
  oldPrivacy: String
  oldAdminModel: String
  oldDecisionMakingModel: String
  oldStandAsidesLimit: Int
  oldReservationsLimit: Int
  oldRatificationThreshold: Int
  oldVotingTimeLimit: Int
  proposalAction: ProposalAction!
}

type GroupRolePermission {
  id: Int!
  manageRoles: Boolean!
  manageSettings: Boolean!
  managePosts: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  updateGroup: Boolean!
  deleteGroup: Boolean!
  createEvents: Boolean!
  approveMemberRequests: Boolean!
  removeMembers: Boolean!
  groupRole: GroupRole!
}

type GroupRole {
  id: Int!
  name: String!
  color: String!
  members: [User!]!
  group: Group!
  proposalActionRoles: [ProposalActionRole!]!
  permissions: GroupRolePermission!
  memberCount: Int!
  availableUsersToAdd: [User!]!
}

type ProposalActionPermission {
  id: Int!
  manageRoles: Boolean
  manageSettings: Boolean
  managePosts: Boolean
  manageComments: Boolean
  manageEvents: Boolean
  updateGroup: Boolean
  deleteGroup: Boolean
  createEvents: Boolean
  approveMemberRequests: Boolean
  removeMembers: Boolean
  role: ProposalActionRole!
}

type ProposalActionRoleMember {
  id: Int!
  changeType: String!
  user: User!
  role: ProposalActionRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProposalActionRole {
  id: Int!
  name: String
  color: String
  oldName: String
  oldColor: String
  members: [ProposalActionRoleMember!]
  proposalAction: ProposalAction!
  groupRole: GroupRole
  permissions: ProposalActionPermission!
}

type ProposalAction {
  id: Int!
  actionType: String!
  groupName: String
  groupDescription: String
  role: ProposalActionRole
  event: ProposalActionEvent
  proposal: Proposal!
  createdAt: DateTime!
  updatedAt: DateTime!
  groupSettings: ProposalActionGroupConfig
  groupCoverPhoto: Image
}

type ProposalConfig {
  id: Int!
  decisionMakingModel: String!
  standAsidesLimit: Int!
  reservationsLimit: Int!
  ratificationThreshold: Int!
  closingAt: DateTime
  proposal: Proposal!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Proposal {
  id: Int!
  body: String
  stage: String!
  action: ProposalAction!
  votes: [Vote!]!
  comments: [Comment!]!
  images: [Image!]!
  user: User!
  group: Group
  createdAt: DateTime!
  updatedAt: DateTime!
  voteCount: Int!
  commentCount: Int!
  settings: ProposalConfig!
}

type GroupConfig {
  id: Int!
  adminModel: String!
  decisionMakingModel: String!
  standAsidesLimit: Int!
  reservationsLimit: Int!
  ratificationThreshold: Int!
  votingTimeLimit: Int!
  privacy: String!
  group: Group!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublic: Boolean!
}

type GroupMemberRequest {
  id: Int!
  user: User!
  group: Group!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Group {
  id: Int!
  name: String!
  description: String!
  members: [User!]!
  memberRequests: [GroupMemberRequest!]
  roles: [GroupRole!]!
  coverPhoto: Image
  createdAt: DateTime!
  updatedAt: DateTime!
  feed(offset: Int, limit: Int): FeedItemsConnection!
  memberCount: Int!
  memberRequestCount: Int
  isJoinedByMe: Boolean!
  futureEvents: [Event!]!
  pastEvents: [Event!]!
  myPermissions: GroupPermissions!
  settings: GroupConfig!
}

type Event {
  id: Int!
  name: String!
  description: String!
  location: String
  online: Boolean!
  externalLink: String
  attendees: [EventAttendee!]!
  images: [Image!]!
  group: Group
  startsAt: DateTime!
  endsAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  interestedCount: Int!
  goingCount: Int!
  attendingStatus: String
  host: User!
  posts(offset: Int, limit: Int): PostsConnection!
  coverPhoto: Image!
}

type Image {
  id: Int!
  filename: String!
  imageType: String!
  post: Post
  comment: Comment
  user: User
  group: Group
  event: Event
  proposal: Proposal
  proposalAction: ProposalAction
  proposalActionEvent: ProposalActionEvent
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: Int!
  body: String
  images: [Image!]!
  likes: [Like!]!
  post: Post
  proposal: Proposal
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ServerRolePermission {
  id: Int!
  manageRoles: Boolean!
  managePosts: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  manageSettings: Boolean!
  manageInvites: Boolean!
  createInvites: Boolean!
  removeMembers: Boolean!
  removeGroups: Boolean!
  serverRole: ServerRole!
}

type ServerRole {
  id: Int!
  name: String!
  color: String!
  members: [User!]!
  permissions: ServerRolePermission!
  memberCount: Int!
  availableUsersToAdd: [User!]!
}

type User {
  id: Int!
  name: String!
  email: String!
  bio: String
  posts: [Post!]!
  proposals: [Proposal!]!
  comments: [Comment!]!
  likes: [Like!]!
  profilePicture: Image!
  coverPhoto: Image
  createdAt: DateTime!
  updatedAt: DateTime!
  homeFeed(offset: Int, limit: Int): FeedItemsConnection!
  profileFeed(offset: Int, limit: Int): FeedItemsConnection!
  followers(offset: Int, limit: Int): UsersConnection!
  following(offset: Int, limit: Int): UsersConnection!
  followerCount: Int!
  followingCount: Int!
  isFollowedByMe: Boolean!
  joinedGroups: [Group!]!
  serverPermissions: ServerPermissions!
}

type ServerInvite {
  id: Int!
  token: String!
  uses: Int!
  maxUses: Int
  user: User!
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CreateServerInvitePayload {
  serverInvite: ServerInvite!
}

type CreateLikePayload {
  like: Like!
}

type CreatePostPayload {
  post: Post!
}

type UpdatePostPayload {
  post: Post!
}

type CreateEventAttendeePayload {
  event: Event!
}

type UpdateEventAttendeePayload {
  event: Event!
}

type PostsConnection {
  nodes: [Post!]!
  totalCount: Int!
}

type CreateEventPayload {
  event: Event!
}

type UpdateEventPayload {
  event: Event!
}

type UpdateGroupPayload {
  group: Group!
}

type ApproveGroupMemberRequestPayload {
  groupMember: User!
}

type CreateGroupMemberRequestPayload {
  groupMemberRequest: GroupMemberRequest!
}

type CreateGroupRolePayload {
  groupRole: GroupRole!
}

type DeleteGroupRoleMemberPayload {
  groupRole: GroupRole!
}

type UpdateGroupRolePayload {
  groupRole: GroupRole!
}

type FeedItemsConnection {
  nodes: [FeedItem!]!
  totalCount: Int!
}

union FeedItem = Post | Proposal

type GroupPermissions {
  manageRoles: Boolean!
  manageSettings: Boolean!
  managePosts: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  updateGroup: Boolean!
  deleteGroup: Boolean!
  createEvents: Boolean!
  approveMemberRequests: Boolean!
  removeMembers: Boolean!
}

type CreateGroupPayload {
  group: Group!
}

type GroupsConnection {
  nodes: [Group!]!
  totalCount: Int!
}

type PublicGroupsConnection {
  nodes: [Group!]!
  totalCount: Int!
}

type CreateVotePayload {
  vote: Vote!
}

type UpdateVotePayload {
  vote: Vote!
}

type CreateProposalPayload {
  proposal: Proposal!
}

type SynchronizeProposalPayload {
  proposal: Proposal!
}

type UpdateProposalPayload {
  proposal: Proposal!
}

type CreateCommentPayload {
  comment: Comment!
}

type UpdateCommentPayload {
  comment: Comment!
}

type CreateServerRolePayload {
  serverRole: ServerRole!
}

type DeleteServerRoleMemberPayload {
  serverRole: ServerRole!
  me: User!
}

type UpdateServerRolePayload {
  serverRole: ServerRole!
  me: User!
}

type ServerPermissions {
  manageRoles: Boolean!
  managePosts: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  manageSettings: Boolean!
  manageInvites: Boolean!
  createInvites: Boolean!
  removeMembers: Boolean!
}

type FollowUserPayload {
  followedUser: User!
  follower: User!
}

type UpdateUserPayload {
  user: User!
}

type UsersConnection {
  nodes: [User!]!
  totalCount: Int!
}

type AuthPayload {
  access_token: String!
}

type UpdateServerConfigPayload {
  serverConfig: ServerConfig!
  canary: Canary!
}

type Query {
  authCheck: Boolean!
  serverInvite(token: String!): ServerInvite!
  serverInvites: [ServerInvite!]!
  me: User!
  user(id: Int, name: String): User!
  users(offset: Int, limit: Int): UsersConnection!
  usersByIds(ids: [Int!]!): [User!]!
  isFirstUser: Boolean!
  serverRole(id: Int!): ServerRole!
  serverRoles: [ServerRole!]!
  post(id: Int!): Post!
  proposal(id: Int!): Proposal!
  event(id: Int): Event!
  events(input: EventsInput!): [Event!]!
  group(id: Int, name: String): Group!
  groups(offset: Int, limit: Int): GroupsConnection!
  publicGroups(offset: Int, limit: Int): PublicGroupsConnection!
  publicGroupsFeed(offset: Int, limit: Int): FeedItemsConnection!
  groupRole(id: Int!): GroupRole!
  groupMemberRequest(groupId: Int!): GroupMemberRequest
  groupRoles: [GroupRole!]!
  canary: Canary!
  publicCanary: Canary
  serverConfig: ServerConfig!
}

input EventsInput {
  timeFrame: String
  online: Boolean
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  signUp(input: SignUpInput!): AuthPayload!
  logOut: Boolean!
  createServerInvite(serverInviteData: CreateServerInviteInput!): CreateServerInvitePayload!
  deleteServerInvite(id: Int!): Boolean!
  updateUser(userData: UpdateUserInput!): UpdateUserPayload!
  deleteUser(id: Int!): Boolean!
  followUser(id: Int!): FollowUserPayload!
  unfollowUser(id: Int!): Boolean!
  createServerRole(serverRoleData: CreateServerRoleInput!): CreateServerRolePayload!
  updateServerRole(serverRoleData: UpdateServerRoleInput!): UpdateServerRolePayload!
  deleteServerRole(id: Int!): Boolean!
  deleteServerRoleMember(serverRoleMemberData: DeleteServerRoleMemberInput!): DeleteServerRoleMemberPayload!
  deleteImage(id: Int!): Boolean!
  createPost(postData: CreatePostInput!): CreatePostPayload!
  updatePost(postData: UpdatePostInput!): UpdatePostPayload!
  deletePost(id: Int!): Boolean!
  createComment(commentData: CreateCommentInput!): CreateCommentPayload!
  updateComment(commentData: UpdateCommentInput!): UpdateCommentPayload!
  deleteComment(id: Int!): Boolean!
  createProposal(proposalData: CreateProposalInput!): CreateProposalPayload!
  updateProposal(proposalData: UpdateProposalInput!): UpdateProposalPayload!
  synchronizeProposal(id: Int!): SynchronizeProposalPayload!
  deleteProposal(id: Int!): Boolean!
  createEvent(eventData: CreateEventInput!): CreateEventPayload!
  updateEvent(eventData: UpdateEventInput!): UpdateEventPayload!
  deleteEvent(id: Int!): Boolean!
  createEventAttendee(eventAttendeeData: CreateEventAttendeeInput!): CreateEventAttendeePayload!
  updateEventAttendee(eventAttendeeData: UpdateEventAttendeeInput!): UpdateEventAttendeePayload!
  deleteEventAttendee(eventId: Int!): Boolean!
  createGroup(groupData: CreateGroupInput!): CreateGroupPayload!
  updateGroup(groupData: UpdateGroupInput!): UpdateGroupPayload!
  deleteGroup(id: Int!): Boolean!
  leaveGroup(id: Int!): Boolean!
  updateGroupConfig(groupConfigData: UpdateGroupConfigInput!): UpdateGroupPayload!
  createGroupMemberRequest(groupId: Int!): CreateGroupMemberRequestPayload!
  approveGroupMemberRequest(id: Int!): ApproveGroupMemberRequestPayload!
  cancelGroupMemberRequest(id: Int!): Boolean!
  denyGroupMemberRequest(id: Int!): Boolean!
  createVote(voteData: CreateVoteInput!): CreateVotePayload!
  updateVote(voteData: UpdateVoteInput!): UpdateVotePayload!
  deleteVote(id: Int!): Boolean!
  createLike(likeData: CreateLikeInput!): CreateLikePayload!
  deleteLike(likeData: DeleteLikeInput!): Boolean!
  createGroupRole(groupRoleData: CreateGroupRoleInput!): CreateGroupRolePayload!
  updateGroupRole(groupRoleData: UpdateGroupRoleInput!): UpdateGroupRolePayload!
  deleteGroupRole(id: Int!): Boolean!
  deleteGroupRoleMember(groupRoleMemberData: DeleteGroupRoleMemberInput!): DeleteGroupRoleMemberPayload!
  updateServerConfig(serverConfigData: UpdateServerConfigInput!): UpdateServerConfigPayload!
}

input LoginInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
  confirmPassword: String!
  profilePicture: Upload
  inviteToken: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateServerInviteInput {
  maxUses: Int
  expiresAt: DateTime
}

input UpdateUserInput {
  id: Int!
  name: String!
  bio: String!
  profilePicture: Upload
  coverPhoto: Upload
}

input CreateServerRoleInput {
  name: String!
  color: String!
}

input UpdateServerRoleInput {
  id: Int!
  name: String
  color: String
  selectedUserIds: [Int!]
  permissions: ServerRolePermissionInput
}

input ServerRolePermissionInput {
  manageRoles: Boolean
  managePosts: Boolean
  manageComments: Boolean
  manageEvents: Boolean
  manageSettings: Boolean
  manageInvites: Boolean
  createInvites: Boolean
  removeMembers: Boolean
  removeGroups: Boolean
}

input DeleteServerRoleMemberInput {
  serverRoleId: Int!
  userId: Int!
}

input CreatePostInput {
  groupId: Int
  eventId: Int
  body: String
  images: [Upload!]
}

input UpdatePostInput {
  id: Int!
  body: String
  images: [Upload!]
}

input CreateCommentInput {
  postId: Int
  proposalId: Int
  body: String
  images: [Upload!]
}

input UpdateCommentInput {
  id: Int!
  body: String
  images: [Upload!]
}

input CreateProposalInput {
  groupId: Int
  body: String
  action: ProposalActionInput!
  images: [Upload!]
  closingAt: DateTime
}

input ProposalActionInput {
  actionType: String!
  event: ProposalActionEventInput
  role: ProposalActionRoleInput
  groupSettings: ProposalActionGroupConfigInput
  groupName: String
  groupDescription: String
  groupCoverPhoto: Upload
}

input ProposalActionEventInput {
  name: String!
  description: String!
  location: String
  online: Boolean
  externalLink: String
  coverPhoto: Upload
  hostId: Int!
  startsAt: DateTime!
  endsAt: DateTime
}

input ProposalActionRoleInput {
  roleToUpdateId: Int
  name: String
  color: String
  members: [ProposalActionRoleMemberInput!]
  permissions: GroupRolePermissionInput
}

input ProposalActionRoleMemberInput {
  userId: Int!
  changeType: String!
}

input GroupRolePermissionInput {
  manageRoles: Boolean
  manageSettings: Boolean
  managePosts: Boolean
  manageComments: Boolean
  manageEvents: Boolean
  updateGroup: Boolean
  deleteGroup: Boolean
  createEvents: Boolean
  approveMemberRequests: Boolean
  removeMembers: Boolean
}

input ProposalActionGroupConfigInput {
  privacy: String
  adminModel: String
  decisionMakingModel: String
  standAsidesLimit: Int
  reservationsLimit: Int
  ratificationThreshold: Int
  votingTimeLimit: Int
}

input UpdateProposalInput {
  id: Int!
  body: String
  action: ProposalActionInput!
  images: [Upload!]
}

input CreateEventInput {
  name: String!
  description: String!
  coverPhoto: Upload
  location: String
  online: Boolean
  externalLink: String
  startsAt: DateTime!
  endsAt: DateTime
  groupId: Int
  hostId: Int!
}

input UpdateEventInput {
  id: Int!
  name: String
  description: String
  coverPhoto: Upload
  location: String
  online: Boolean
  externalLink: String
  hostId: Int
  startsAt: DateTime!
  endsAt: DateTime
}

input CreateEventAttendeeInput {
  eventId: Int!
  status: String!
}

input UpdateEventAttendeeInput {
  eventId: Int!
  status: String!
}

input CreateGroupInput {
  name: String!
  description: String!
  coverPhoto: Upload
}

input UpdateGroupInput {
  id: Int!
  name: String
  description: String
  coverPhoto: Upload
}

input UpdateGroupConfigInput {
  groupId: Int!
  adminModel: String
  decisionMakingModel: String
  standAsidesLimit: Int
  reservationsLimit: Int
  ratificationThreshold: Int
  votingTimeLimit: Int
  privacy: String
}

input CreateVoteInput {
  proposalId: Int!
  voteType: String!
}

input UpdateVoteInput {
  id: Int!
  voteType: String!
}

input CreateLikeInput {
  postId: Int
}

input DeleteLikeInput {
  postId: Int
}

input CreateGroupRoleInput {
  name: String!
  color: String!
  groupId: Int!
}

input UpdateGroupRoleInput {
  id: Int!
  name: String
  color: String
  selectedUserIds: [Int!]
  permissions: GroupRolePermissionInput
}

input DeleteGroupRoleMemberInput {
  groupRoleId: Int!
  userId: Int!
}

input UpdateServerConfigInput {
  id: Int!
  canaryStatement: String
  showCanaryStatement: Boolean
  securityTxt: String
}

type Subscription {
  isProposalRatified(id: Int!): Boolean!
}